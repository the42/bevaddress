-- Copyright Johann Höchtl 2016 https://github.com/the42/bevaddress-dataload
--
-- Pipe this script through psql with an active connection to your PostgreSQL database server
-- This is performed using this command line:
-- psql -h HOST -p PORT -U username -W password -f create.sql
-- This script has to be executed in the directory where you unzipped the files from
-- http://www.bev.gv.at/portal/page?_pageid=713,2601271&_dad=portal&_schema=PORTAL

CREATE TABLE GEMEINDE (
  GKZ TEXT,
  GEMEINDENAME TEXT
);

\copy GEMEINDE(GKZ, GEMEINDENAME) FROM 'GEMEINDE.csv' (FORMAT csv, HEADER true, DELIMITER ';')

CREATE TABLE ORTSCHAFT (
  GKZ TEXT,
  OKZ TEXT,
  ORTSNAME TEXT
);

\copy ORTSCHAFT(GKZ, OKZ, ORTSNAME) FROM 'ORTSCHAFT.csv' (FORMAT csv, HEADER true, DELIMITER ';')

CREATE TABLE STRASSE (
  SKZ TEXT,
  STRASSENNAME TEXT,
  STRASSENNAMENZUSATZ TEXT,
  SZUSADRBEST SMALLINT,
  GKZ TEXT
);

\copy STRASSE(SKZ, STRASSENNAME, STRASSENNAMENZUSATZ, SZUSADRBEST, GKZ) FROM 'STRASSE.csv' (FORMAT csv, HEADER true, DELIMITER ';')

CREATE TABLE ZAEHLSPRENGEL (
  GKZ TEXT,
  ZAEHLSPRENGEL TEXT,
  ZAEHLSPRENGELNAME TEXT
);

\copy ZAEHLSPRENGEL(GKZ, ZAEHLSPRENGEL, ZAEHLSPRENGELNAME) FROM 'ZAEHLSPRENGEL.csv' (FORMAT csv, HEADER true, DELIMITER ';')

CREATE TABLE ADRESSE (
  ADRCD TEXT,
  GKZ TEXT,
  OKZ TEXT,
  PLZ TEXT,
  SKZ TEXT,
  ZAEHLSPRENGEL TEXT,
  HAUSNRTEXT TEXT,
  HAUSNRZAHL1 INTEGER,
  HAUSNRBUCHSTABE1 TEXT,
  HAUSNRVERBINDUNG1 TEXT,
  HAUSNRZAHL2 INTEGER,
  HAUSNRBUCHSTABE2 TEXT,
  HAUSNRBEREICH TEXT,
  GNRADRESSE SMALLINT,
  HOFNAME TEXT,
  RW DOUBLE PRECISION,
  HW DOUBLE PRECISION,
  EPSG INTEGER,
  QUELLADRESSE TEXT,
  BESTIMMUNGSART TEXT
);

\copy ADRESSE(ADRCD, GKZ, OKZ, PLZ, SKZ, ZAEHLSPRENGEL, HAUSNRTEXT, HAUSNRZAHL1, HAUSNRBUCHSTABE1, HAUSNRVERBINDUNG1, HAUSNRZAHL2, HAUSNRBUCHSTABE2, HAUSNRBEREICH, GNRADRESSE,   HOFNAME, RW, HW, EPSG, QUELLADRESSE, BESTIMMUNGSART) FROM 'ADRESSE.csv' (FORMAT csv, HEADER true, DELIMITER ';')

-- add an additional column to the table ADRESSE to keep the original RW, HW in the given EPSG code
ALTER TABLE ADRESSE ADD COLUMN MGIAUSTRIAGK geometry(POINT);

-- insert the HW and RW into this newly created column
UPDATE ADRESSE SET MGIAUSTRIAGK = ST_SetSRID(ST_MakePoint(HW, RW), epsg);

-- add an additional column to the table ADRESSE to keep coordinates in lat / long
ALTER TABLE ADRESSE ADD COLUMN LATLONG geometry(POINT);
UPDATE ADRESSE SET LATLONG = ST_Transform(MGIAUSTRIAGK, 4326);

CREATE TABLE ADRESSE_GST (
  ADRCD TEXT,
  KGNR TEXT,
  GSTNR TEXT,
  LFDNR integer
);

\copy ADRESSE_GST(ADRCD, KGNR, GSTNR, LFDNR) FROM 'ADRESSE_GST.csv' (FORMAT csv, HEADER true, DELIMITER ';')

CREATE TABLE GEBAEUDE (
  ADRCD TEXT,
  SUBCD TEXT,
  OBJEKTNUMMER TEXT,
  HAUPTADRESSE SMALLINT,
  HAUSNRVERBINDUNG2 TEXT,
  HAUSNRZAHL3 INTEGER,
  HAUSNRBUCHSTABE3 TEXT,
  HAUSNRVERBINDUNG3 TEXT,
  HAUSNRZAHL4 INTEGER,
  HAUSNRBUCHSTABE4 TEXT,
  HAUSNRGEBAEUDEBEZ TEXT,
  RW DOUBLE PRECISION,
  HW DOUBLE PRECISION,
  EPSG INTEGER,
  QUELLADRESSE TEXT,
  BESTIMMUNGSART TEXT,
  EIGENSCHAFT TEXT
);

\copy GEBAEUDE(ADRCD, SUBCD, OBJEKTNUMMER, HAUPTADRESSE, HAUSNRVERBINDUNG2, HAUSNRZAHL3, HAUSNRBUCHSTABE3, HAUSNRVERBINDUNG3, HAUSNRZAHL4, HAUSNRBUCHSTABE4, HAUSNRGEBAEUDEBEZ, RW, HW, EPSG, QUELLADRESSE, BESTIMMUNGSART, EIGENSCHAFT) FROM 'GEBAEUDE.csv' (FORMAT csv, HEADER true, DELIMITER ';')

-- add an additional column to the table GEBAEUDE to keep the original RW, HW in the given EPSG code
ALTER TABLE GEBAEUDE ADD COLUMN MGIAUSTRIAGK geometry(POINT);

-- insert the HW and RW into this newly created column
UPDATE GEBAEUDE SET MGIAUSTRIAGK = ST_SetSRID(ST_MakePoint(HW, RW), epsg);

-- add an additional column to the table GEBAEUDE to keep coordinates in lat / long
ALTER TABLE GEBAEUDE ADD COLUMN LATLONG geometry(POINT);
UPDATE GEBAEUDE SET LATLONG = ST_Transform(MGIAUSTRIAGK, 4326);

CREATE TABLE GEBAEUDE_FUNKTION (
  ADRCD TEXT,
  SUBCD TEXT,
  OBJEKTNUMMER TEXT,
  OBJFUNKTKENNZIFFER TEXT
);

\copy GEBAEUDE_FUNKTION(ADRCD, SUBCD, OBJEKTNUMMER, OBJFUNKTKENNZIFFER) FROM 'GEBAEUDE_FUNKTION.csv' (FORMAT csv, HEADER true, DELIMITER ';')

-- now check / add the constraints as they are advertised in the description BEV_S_AD_Adresse_Relationale_Tabellen-Stichtagsdaten-CSV_V1.0.pdf
ALTER TABLE GEMEINDE ADD CONSTRAINT GEMEINDE_PK PRIMARY KEY(GKZ);

ALTER TABLE ORTSCHAFT ADD CONSTRAINT ORTSCHAFT_PK PRIMARY KEY(OKZ);

ALTER TABLE STRASSE ADD CONSTRAINT STRASSE_PK PRIMARY KEY(SKZ);

ALTER TABLE ZAEHLSPRENGEL ADD CONSTRAINT ZAEHLSPRENGEL_PK PRIMARY KEY(GKZ, ZAEHLSPRENGEL);

ALTER TABLE ADRESSE ADD CONSTRAINT ADRESSE_PK PRIMARY KEY(ADRCD);

ALTER TABLE GEBAEUDE ADD CONSTRAINT GEBAEUDE_PK PRIMARY KEY(ADRCD, SUBCD);



-- as there is no ER diagram describing the relationship between the entities we guess from establshing foreign key relationships
ALTER TABLE ORTSCHAFT ADD CONSTRAINT ORTSCHAFT_GKZ_FKEY FOREIGN KEY (GKZ) REFERENCES GEMEINDE;

ALTER TABLE STRASSE ADD CONSTRAINT STRASSE_GKZ_FKEY FOREIGN KEY (GKZ) REFERENCES GEMEINDE;

ALTER TABLE ZAEHLSPRENGEL ADD CONSTRAINT ZAEHLSPRENGEL_GKZ_FKEY FOREIGN KEY (GKZ) REFERENCES GEMEINDE;

ALTER TABLE ADRESSE ADD CONSTRAINT ADRESSE_GKZ_FKEY FOREIGN KEY (GKZ) REFERENCES GEMEINDE;
ALTER TABLE ADRESSE ADD CONSTRAINT ADRESSE_OKZ_FKEY FOREIGN KEY (OKZ) REFERENCES ORTSCHAFT;
ALTER TABLE ADRESSE ADD CONSTRAINT ADRESSE_SKZ_FKEY FOREIGN KEY (SKZ) REFERENCES STRASSE;

--here we might have a problem, investigate:
--ALTER TABLE ADRESSE ADD CONSTRAINT ADRESSE_ZAEHLSPRENGEL_FKEY FOREIGN KEY (GKZ, ZAEHLSPRENGEL) REFERENCES ZAEHLSPRENGEL;
--ERROR:  insert or update on table "adresse" violates foreign key constraint "adresse_zaehlsprengel_fkey"
--DETAIL:  Key (gkz, zaehlsprengel)=(30201, ) is not present in table "zaehlsprengel".

ALTER TABLE ADRESSE_GST ADD CONSTRAINT ADRESSE_GST_ADRCD_FKEY FOREIGN KEY (ADRCD) REFERENCES ADRESSE;

ALTER TABLE GEBAEUDE ADD CONSTRAINT GEBAEUDE_ADRCD_FKEY FOREIGN KEY (ADRCD) REFERENCES ADRESSE;

ALTER TABLE GEBAEUDE_FUNKTION ADD CONSTRAINT GEBAEUDE_FUNKTION_ADRCD_SUBCD_FKEY FOREIGN KEY (ADRCD, SUBCD) REFERENCES GEBAEUDE;




--now create indices to make querying fast
CREATE INDEX gemeinde_gemeindename ON GEMEINDE(GEMEINDENAME);

CREATE INDEX ortschaft_gkz ON ORTSCHAFT(GKZ);
CREATE INDEX ortschaft_ortsname ON ORTSCHAFT(ORTSNAME);

CREATE INDEX strasse_strassenname ON STRASSE(STRASSENNAME);
CREATE INDEX strasse_gkz ON STRASSE(GKZ);

CREATE INDEX adresse_gkz ON ADRESSE(GKZ);
CREATE INDEX adresse_okz ON ADRESSE(OKZ);
CREATE INDEX adresse_plz ON ADRESSE(PLZ);
CREATE INDEX adresse_skz ON ADRESSE(SKZ);
CREATE INDEX adresse_hofname ON ADRESSE(HOFNAME);




--prepare for full text search
--question the following three indices
-- ALTER TABLE GEMEINDE ADD COLUMN SEARCH tsvector;
-- UPDATE GEMEINDE SET SEARCH = to_tsvector('german', GEMEINDENAME);

-- ALTER TABLE ORTSCHAFT ADD COLUMN SEARCH tsvector;
-- UPDATE ORTSCHAFT SET SEARCH = to_tsvector('german', ORTSNAME);

-- ALTER TABLE STRASSE ADD COLUMN SEARCH tsvector;
-- UPDATE STRASSE SET SEARCH = to_tsvector('german', STRASSENNAME);


CREATE TABLE ADDRITEMS AS
select plz, gemeindename, ortsname, strassenname, gemeinde.gkz, ortschaft.okz, strasse.skz, adresse.adrcd
from adresse
inner join strasse
on adresse.skz = strasse.skz
and adresse.gkz = strasse.gkz
and adresse.gkz = strasse.gkz
inner join ortschaft
on adresse.okz = ortschaft.okz
and adresse.gkz = ortschaft.gkz
inner join gemeinde
on adresse.gkz = gemeinde.gkz;


CREATE INDEX ADDRITEMS_gkz ON ADDRITEMS(GKZ);
CREATE INDEX ADDRITEMS_okz ON ADDRITEMS(OKZ);
CREATE INDEX ADDRITEMS_plz ON ADDRITEMS(PLZ);
CREATE INDEX ADDRITEMS_skz ON ADDRITEMS(SKZ);


ALTER TABLE ADDRITEMS ADD COLUMN SEARCH tsvector;
UPDATE ADDRITEMS SET SEARCH = to_tsvector('german', coalesce(plz,'') || ' ' || coalesce(gemeindename,'') || ' ' || coalesce(ortsname,'') || ' ' || coalesce(strassenname,''));

CREATE INDEX textsearch_idx ON ADDRITEMS USING gin(SEARCH);


-- Add the Bundesland as we will use it in constraints
ALTER TABLE GEMEINDE ADD COLUMN BLD SMALLINT;
UPDATE GEMEINDE SET BLD = left(GKZ, 1)::SMALLINT WHERE BLD IS NULL;
-- Info from https://de.wikipedia.org/wiki/ISO_3166-2:AT
-- Burgenland Burgenland 	AT-1
-- Kärnten Kärnten 	AT-2
-- Niederösterreich Niederösterreich 	AT-3
-- Oberösterreich Oberösterreich 	AT-4
-- Land Salzburg Salzburg 	AT-5
-- Steiermark Steiermark 	AT-6
-- Tirol (Bundesland) Tirol 	AT-7
-- Vorarlberg Vorarlberg 	AT-8
-- Wien Wien 	AT-9
